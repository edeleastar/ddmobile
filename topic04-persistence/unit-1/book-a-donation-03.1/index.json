{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-05","contentMd":"#Objectives\n\nIn <b>Donation.3.1</b> you will build on the previous lab and add in some new features and JSON File Support, and an Application Object. On completion of this lab you'll be able to add File Handling using JSON to an Android Application and work with an 'Application' object. \n"},{"title":"#Setup - Starter Code","shortTitle":"01","contentMd":"#Setup - Starter Code\n\nAs with the previous labs, you can download the solution/starter code for [Donation.3.1.starter](archives/Donation.3.1.Starter.zip), or continue on with your own version.\n\nYour current project (after renaming/copying) should looks as follows:\n\n![](img/lab5s101.png)\n\nIn this lab, you are required to do the following:\n\n- Add a new Menu Option - 'Reset' - to clear out any donations after the target is reached\n- Introduce a serialization mechanism to save and restore the donations list to and from a file \n- Refactor existing Classes to accommodate the new serialization mechanism\n\nThe following steps will guide you through these requirements, so we'll start with the Menu Option.\n"},{"title":"#Adding a new Menu Option","shortTitle":"02","contentMd":"#Adding a new Menu Option\n\nFirst of all, confirm that the current Menu looks like this:\n\n![](img/lab5s201.png)\n\nbut we want something like this:\n\n![](img/lab5s202.png)\n\nThe first thing to do is add in a new resource in strings.xml (or use Android Studio (Alt + Return) to fix the string resource error if you paste in the menu item directly)\n\n~~~xml\n \t<string name=\"menuReset\">Reset</string>\n~~~\n\nand then the corresponding menu item in donate.xml\n\n~~~xml\n \t<item\n        android:id=\"@+id/menuReset\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\"\n        android:title=\"@string/menuReset\"\n        android:onClick=\"reset\"/>\n~~~\n\nIt's probably worth removing the 'Settings' menu item at this stage too, and its related method in the Base class. Next, edit <b>Base.java</b> and add in the following method stub\n\n~~~java\npublic void reset(MenuItem item) {}\n~~~\n\nto ensure our app won't crash when the menu loads (and looks for a method 'reset')\n\nRun the app again and confirm you get the following Menu :\n\n![](img/lab5s202.png)\n\nWe can't implement this menu option fully yet, so for the moment, we'll just 'reset' the target amount back to zero (0) - Step 03.\n"},{"title":"#Resetting the Target Amount","shortTitle":"03","contentMd":"#Resetting the Target Amount\n\nThis is more of an interim step but is necessary to ensure the menu event handler for the 'Reset' option is working correctly.\n\nFirst, edit <b>Donate.java</b> and introduce an implementation of the 'reset' method\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n\t\t// Your implementation goes here\n  }\n~~~\n\nthe\n\n~~~java\n@Override\n~~~\n\nannotation is important - can you explain why?\n\nSo add in the code necessary to deal with the Reset Menu option being selected, and reset the <i>totalDonated</i> back to zero (0). You also need to update the Donate UI to reflect this reset, so try and have a go at that too.\n\nRun the app again to confirm that the 'Reset' Menu option is now functioning.\n"},{"title":"#Application Object","shortTitle":"04","contentMd":"#Application Object\n\nBefore we complete this step, here's the code you need for the previous step.\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n    totalDonated = 0;\n    amountTotal.setText(\"$\" + totalDonated);\n    progressBar.setProgress(0);\n    donations.clear();\n  }\n~~~\n\nIn order to keep out application design coherent, we now bring in an 'Application' object.\n\nCreate a new package called 'ie.app.main' and incorporate this class here:\n\n~~~java\npackage ie.app.main;\n\nimport android.app.Application;\nimport android.util.Log;\n\npublic class DonationApp extends Application\n{\n  @Override\n  public void onCreate()\n  {\n    super.onCreate();\n    Log.v(\"Donate\", \"Donation App Started\");\n  }\n}\n~~~\n\nApplication objects need to be references in the AndroidManifest.xml - at the very top as 'andorid:name'\n\n~~~xml\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:name=\"ie.app.main.DonationApp\">\n~~~\n\nMake sure the 'Donation App Started' appears in the logs to verify that it has actually been engaged correctly, when you launch the app.\n\n![](img/lab5s401.png)\n"},{"title":"#Donation Refactoring","shortTitle":"05","contentMd":"#Donation Refactoring\n\nWe now need to refactor the Base class (next Step) and move the donation related attributes and method (i.e. the variables target, totalDonated and the donations list, and the newDonation() method) into our DonationApp class.\n\nThis is a revised version of DonationApp - which now manages a list of donations. It also centralises the 'makeDonation' event implementing it as a method. We will also 'open' and  'close' our JSON file here. Replace your DonationApp class with this one:\n\n~~~java\npackage ie.app.main;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport android.app.Application;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport ie.app.models.Donation;\n\npublic class DonationApp extends Application\n{\n    public final int       target       = 10000;\n    public int             totalDonated = 0;\n    public List <Donation> donations    = new ArrayList<Donation>();\n\n    public boolean newDonation(Donation donation)\n    {\n        boolean targetAchieved = totalDonated > target;\n        if (!targetAchieved) {\n            donations.add(donation);\n            totalDonated += donation.amount;\n        }\n        else\n            Toast.makeText(this, \"Target Exceeded!\", Toast.LENGTH_SHORT).show();\n\n        return targetAchieved;\n    }\n\n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n        Log.v(\"Donate\", \"Donation App Started\");\n    }\n}\n~~~\n\nYou'll have a number of errors but wait until the next step to investigate further as a lot of the errors will be fixed at that stage.\n"},{"title":"#Base Class Refactoring","shortTitle":"06","contentMd":"#Base Class Refactoring\r\n\r\nThe Base activity can now be completely refactored to make use of the DonationApp object.\r\n\r\nThis is our new Base class\r\n\r\n~~~java\r\npackage ie.app.activities;\r\n\r\nimport android.content.Intent;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.os.Bundle;\r\n\r\nimport ie.app.R;\r\nimport ie.app.main.DonationApp;\r\n\r\npublic class Base extends AppCompatActivity {\r\n\r\n    public DonationApp app;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        app = (DonationApp) getApplication();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu)\r\n    {\r\n        getMenuInflater().inflate(R.menu.menu_donate, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu (Menu menu){\r\n        super.onPrepareOptionsMenu(menu);\r\n        MenuItem report = menu.findItem(R.id.menuReport);\r\n        MenuItem donate = menu.findItem(R.id.menuDonate);\r\n        MenuItem reset = menu.findItem(R.id.menuReset);\r\n\r\n        if(app.donations.isEmpty())\r\n        {\r\n            report.setEnabled(false);\r\n            reset.setEnabled(false);\r\n        }\r\n        else {\r\n            report.setEnabled(true);\r\n            reset.setEnabled(true);\r\n        }\r\n        if(this instanceof Donate){\r\n            donate.setVisible(false);\r\n            if(!app.donations.isEmpty())\r\n            {\r\n                report.setVisible(true);\r\n                reset.setEnabled(true);\r\n            }\r\n        }\r\n        else {\r\n            report.setVisible(false);\r\n            donate.setVisible(true);\r\n            reset.setVisible(false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void report(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Report.class));\r\n    }\r\n\r\n    public void donate(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Donate.class));\r\n    }\r\n\r\n    public void reset(MenuItem item) {}\r\n}\r\n~~~\r\n\r\nThere'll be a few small errors to fix (relating to references to what was in the Base class, but is now in the Application class) so Builde your project and use Android Studio to help you.\r\n"},{"title":"#Adding JSON File Support - Part 1","shortTitle":"07","contentMd":"#Adding JSON File Support - Part 1\n\nThe Donation model class will need an ability to save and restore itself to some external format. A convenient choice for this format is JSON:\n\n\n- <http://json.org/>\n\nAndroid has support for this format in its libraries:\n\n~~~\nimport org.json.JSONException;\nimport org.json.JSONObject;\n~~~\n\n.. we should define in our classes appropriate names for each of the fields we wish to serialize:\n\n~~~\n  private static final String JSON_ID               = \"id\";\n  private static final String JSON_AMOUNT           = \"amount\";\n  private static final String JSON_METHOD           = \"method\";\n~~~\n\nThis Donation class will need a new constructor to load a Donation object from JSON:\n\n~~~\n  public Donation(JSONObject json) throws JSONException\n  {\n    id       = json.getLong(JSON_ID);\n    amount   = json.getInt(JSON_AMOUNT);\n    method   = json.getString(JSON_METHOD);\n  }\n~~~\n\n... and a corresponding method to save an object to JSON:\n\n~~~  \n  public JSONObject toJSON() throws JSONException\n  {\n    JSONObject json = new JSONObject();\n    json.put(JSON_ID       , id);\n    json.put(JSON_AMOUNT   , amount);\n    json.put(JSON_METHOD   , method);\n    return json;\n  }\n~~~\n\n##Complete refactored model Donation class for reference purposes:\n\n~~~\npublic class Donation\n{\n    public long   id;\n    public int    amount;\n    public String method;\n\n    private static final String JSON_ID               = \"id\";\n    private static final String JSON_AMOUNT           = \"amount\";\n    private static final String JSON_METHOD           = \"method\";\n\n    public Donation (int amount, String method)\n    {\n        this.id = unsignedLong();\n        this.amount = amount;\n        this.method = method;\n    }\n\n    public Donation(JSONObject json) throws JSONException\n    {\n        id       = json.getLong(JSON_ID);\n        amount   = json.getInt(JSON_AMOUNT);\n        method   = json.getString(JSON_METHOD);\n    }\n\n    public JSONObject toJSON() throws JSONException\n    {\n        JSONObject json = new JSONObject();\n        json.put(JSON_ID       , id);\n        json.put(JSON_AMOUNT   , amount);\n        json.put(JSON_METHOD   , method);\n        return json;\n    }\n\n    @Override\n    public String toString() {\n        return \"Donation{\" +\n                \"id= \" + id +\n                \"amount=$\" + amount +\n                \", method='\" + method + '\\'' +\n                '}';\n    }\n\n    /**\n     * Generate a long greater than zero\n     * @return Unsigned Long value greater than zero\n     */\n    private Long unsignedLong() {\n        long rndVal = 0;\n        do {\n            rndVal = new Random().nextLong();\n        } while (rndVal <= 0);\n        return rndVal;\n    }\n}\n\n~~~\n"},{"title":"#Adding JSON File Support - Part 2","shortTitle":"08","contentMd":"#Adding JSON File Support - Part 2\n\nIn order to perform the actual serialization, we provide a new model class (DonationSerializer) to save and restore a list of Donations:\n\n~~~\npackage ie.app.models;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONTokener;\n\nimport android.content.Context;\n\npublic class DonationSerializer\n{\n    private Context mContext;\n    private String mFilename;\n\n    public DonationSerializer(Context c, String f)\n    {\n        mContext = c;\n        mFilename = f;\n    }\n\n    public void saveDonations(ArrayList<Donation> donations) throws JSONException, IOException\n    {\n        // build an array in JSON\n        JSONArray array = new JSONArray();\n        for (Donation d : donations)\n            array.put(d.toJSON());\n\n        // write the file to disk\n        Writer writer = null;\n        try\n        {\n            OutputStream out = mContext.openFileOutput(mFilename, Context.MODE_PRIVATE);\n            writer = new OutputStreamWriter(out);\n            writer.write(array.toString());\n        }\n        finally\n        {\n            if (writer != null)\n                writer.close();\n        }\n    }\n\n    public ArrayList<Donation> loadDonations() throws IOException, JSONException\n    {\n        ArrayList<Donation> donations = new ArrayList<Donation>();\n        BufferedReader reader = null;\n        try\n        {\n            // open and read the file into a StringBuilder\n            InputStream in = mContext.openFileInput(mFilename);\n            reader = new BufferedReader(new InputStreamReader(in));\n            StringBuilder jsonString = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null)\n            {\n                // line breaks are omitted and irrelevant\n                jsonString.append(line);\n            }\n            // parse the JSON using JSONTokener\n            JSONArray array = (JSONArray) new JSONTokener(jsonString.toString()).nextValue();\n            // build the array of donations from JSONObjects\n            for (int i = 0; i < array.length(); i++)\n            {\n                donations.add(new Donation(array.getJSONObject(i)));\n            }\n        }\n        catch (FileNotFoundException e)\n        {\n            // we will ignore this one, since it happens when we start fresh\n        }\n        finally\n        {\n            if (reader != null)\n                reader.close();\n        }\n        return donations;\n    }\n}\n~~~\n\nPlace this complete class in the 'models' package.\n"},{"title":"#Adding JSON File Support - Part 3","shortTitle":"09","contentMd":"#Adding JSON File Support - Part 3\n\nThe DonationApp Application class will now be equipped with the capability to use the serializer to save and restore the Donations it is managing. It will use the DonationSerializer class just developed to do this.\n\nFirst, introduce the serializer as a member of the DonationApp class:\n\n~~~\n  private DonationSerializer   serializer;\n~~~\n\n... then revise the onCreate() to setup a serializer when it is being initialised:\n\n~~~\n@Override\n  public void onCreate()\n  {\n      super.onCreate();\n      Log.v(\"Donate\", \"Donation App Started\");\n      serializer = new DonationSerializer(this,\"donations.json\");\n          try {\n              donations = serializer.loadDonations();\n              Log.v(\"Donate\", \"Donation JSON file Created/Loaded\");\n              }\n          catch (Exception e) // Catch everything!!\n              {\n                  Log.v(\"Donate\", \"Error loading Donations: \" + e.getMessage());\n                  donations = new ArrayList<Donation>();\n              }\n  }\n~~~\n\nThen in your Base class add/Override the following method to save our donations, once the user closes the app.\n\n~~~\n@Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        try {\n            app.serializer.saveDonations(app.donations);\n            Log.v(\"Donate\", \"Donation JSON File Saved...\");\n        }\n        catch (Exception e)\n        {\n            Log.v(\"Donate\", \"Error Saving Donations... \" + e.getMessage());\n        }\n    }\n~~~\n\nRun your app and confirm that you can now persist your donations.\n\nIt should now be possible to save and load the donations. Verify that this works - you will need to completely kill the app for this to be verified.\n"},{"title":"#Resetting the Donations","shortTitle":"10","contentMd":"#Resetting the Donations\n\nThe last step in this lab involves deleting all the donations in the JSON file when the user wishes to 'Reset'.\n\nThere's actually not a lot required in this step - all you need to do is <b>clear()</b> the donations list and store that empty list back to the file when the user selects the Menu option, (we're not really deleting, but we get what we want!) so modify your reset method (in your Donate.java) as follows:\n\n~~~java\n@Override\n  public void reset(MenuItem item)\n  {\n      app.totalDonated = 0;\n      amountTotal.setText(\"$\" + app.totalDonated);\n      progressBar.setProgress(0);\n      app.donations.clear();\n\n      try {\n          app.serializer.saveDonations(app.donations);\n          Log.v(\"Donate\", \"Donation JSON File Reset...\");\n      }\n      catch (Exception e)\n      {\n          Log.v(\"Donate\", \"Error Resetting Donations... \" + e.getMessage());\n      }\n  }\n~~~\n\nYou also need to update your <i>onPrepareOptionsMenu()</i> method in your <b>Base</b> class to handle the 'Reset' menu option being disabled/displayed properly, so refer to the lecture material for this.\n\nThat's about it really - with one exception. There's a small bug in the app related to when the app restarts and the target <b>HAS NOT</b> been reached.\n\nCan you find it, and more importantly, fix it?\n"},{"title":"#Exercise - Gson Support","shortTitle":"Exercise","contentMd":"#Exercise - Gson Support\n\nAs an exercise, purely for comparison, have a go at replacing the JSON serializer code with Google's Gson.\n\nFirst, you need to add the relevant dependencies, like so:\n\n~~~xml\ncompile 'com.google.code.gson:gson:2.8.2' // for Googles Gson JSON Parser\n~~~\n\nThen, referring to the lecture material see if you can refactor the DonationSerializer class to use Gson instead of the standard JSON libraries.\n"},{"title":"#Solution","shortTitle":"Solution","contentMd":"#Solution\n\nThis is a solution to the lab:\n\n- [Donation.3.1](archives/Donation.3.1.zip)\n\nAnd here's the Gson Version\n\n- [Donation.3.1.Gson](archives/Donation.3.1.Gson.zip)\n"}]}