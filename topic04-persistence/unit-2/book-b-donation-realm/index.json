{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-07","contentMd":"#Objectives\n\nIn <b>Donation.4.0.Realm</b> you will again build on the previous lab and add in some new features and Database Support, and an Application Object. It's actually very similar to <b>Donation.4.0</b>, but with Realm support, the code base is reduced substantially.\n"},{"title":"#Setup - Starter Code","shortTitle":"01","contentMd":"#Setup - Starter Code\n\nAs with the previous labs, you can download the solution/starter code for [Donation.4.0.starter](archives/Donation.4.0.Starter.zip), or continue on with your own version.\n\nYour current project (after renaming/copying) should looks something like this:\n\n![](img/lab5s101.png)\n\nIn this lab, you are required to do the following:\n\n- Add a new Menu Option - 'Reset' - to clear out any donations after the target is reached\n- Add Realm Database Support to Donation to manage the donations made\n- Refactor existing Classes to accommodate the new database classes\n\nThe following steps will guide you through these requirements, so we'll start with the Menu Option.\n"},{"title":"#Adding a new Menu Option","shortTitle":"02","contentMd":"#Adding a new Menu Option\n\nFirst of all, confirm that the current Menu looks like this:\n\n![](img/lab5s201.png)\n\nbut we want something like this:\n\n![](img/lab5s202.png)\n\nThe first thing to do is add in a new resource in strings.xml (or use Android Studio (Alt + Return) to fix the string resource error if you paste in the menu item directly)\n\n~~~xml\n \t<string name=\"menuReset\">Reset</string>\n~~~\n\nand then the corresponding menu item in donate.xml\n\n~~~xml\n \t<item\n        android:id=\"@+id/menuReset\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\"\n        android:title=\"@string/menuReset\"\n        android:onClick=\"reset\"/>\n~~~\n\nIt's probably worth removing the 'Settings' menu item at this stage too, and its related method in the Base class. Next, edit <b>Base.java</b> and add in the following method stub\n\n~~~java\npublic void reset(MenuItem item) {}\n~~~\n\nto ensure our app won't crash when the menu loads (and looks for a method 'reset')\n\nRun the app again and confirm you get the following Menu :\n\n![](img/lab5s202.png)\n\nWe can't implement this menu option fully yet, so for the moment, we'll just 'reset' the target amount back to zero (0) - Step 03.\n"},{"title":"#Resetting the Target Amount","shortTitle":"03","contentMd":"#Resetting the Target Amount\n\nThis is more of an interim step but is necessary to ensure the menu event handler for the 'Reset' option is working correctly.\n\nFirst, edit <b>Donate.java</b> and introduce an implementation of the 'reset' method\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n\t\t// Your implementation goes here\n  }\n~~~\n\nthe\n\n~~~java\n@Override\n~~~\n\nannotation is important - can you explain why?\n\nSo add in the code necessary to deal with the Reset Menu option being selected, and reset the <i>totalDonated</i> back to zero (0). You also need to update the Donate UI to reflect this reset, so try and have a go at that too.\n\nRun the app again to confirm that the 'Reset' Menu option is now functioning.\n"},{"title":"#Application Object","shortTitle":"04","contentMd":"#Application Object\n\nBefore we complete this step, here's the code you need for the previous step.\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n    totalDonated = 0;\n    amountTotal.setText(\"$\" + totalDonated);\n    donations.clear();\n  }\n~~~\n\nIn order to keep out application design coherent, we now bring in an 'Application' object.\n\nCreate a new package called 'ie.app.main' and incorporate this class here:\n\n~~~java\npackage ie.app.main;\n\nimport android.app.Application;\nimport android.util.Log;\n\npublic class DonationApp extends Application\n{\n  @Override\n  public void onCreate()\n  {\n    super.onCreate();\n    Log.v(\"Donate\", \"Donation App Started\");\n  }\n}\n~~~\n\nApplication objects need to be references in the AndroidManifest.xml - at the very top as 'andorid:name'\n\n~~~xml\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:name=\"ie.app.main.DonationApp\">\n~~~\n\nMake sure the 'Donation App Started' appears in the logs to verify that it has actually been engaged correctly, when you launch the app.\n\n![](img/lab5s401.png)\n"},{"title":"#Donation Model","shortTitle":"05","contentMd":"#Donation Model\n\nWe now need to refactor the Base class (next Step) and move the donation related attributes and method (i.e. the variables target, totalDonated and the donations list, and the newDonation() method) into our DonationApp class.\n\nThis is a revised version of DonationApp - which now manages a list of donations. It also centralises the 'makeDonation' event implementing it as a method. We will also 'open' and  'close' our database here eventually. Replace your DonationApp class with this one:\n\n~~~java\npackage ie.app.main;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport android.app.Application;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport ie.app.models.Donation;\n\npublic class DonationApp extends Application\n{\n    public final int       target       = 10000;\n    public int             totalDonated = 0;\n    public List <Donation> donations    = new ArrayList<Donation>();\n\n    public boolean newDonation(Donation donation)\n    {\n        boolean targetAchieved = totalDonated > target;\n        if (!targetAchieved) {\n            donations.add(donation);\n            totalDonated += donation.amount;\n        }\n        else\n            Toast.makeText(this, \"Target Exceeded!\", Toast.LENGTH_SHORT).show();\n\n        return targetAchieved;\n    }\n\n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n        Log.v(\"Donate\", \"Donation App Started\");\n    }\n}\n~~~\n"},{"title":"#Base Class Refactoring","shortTitle":"06","contentMd":"#Base Class Refactoring\r\n\r\nThe Base activity can now be completely refactored to make use of the DonationApp object. You <b>WILL</b> have errors at the end of this step, due to referencing our (as yet missing) database classes - but we'll fix those in the next few steps.\r\n\r\nThis is our new Base class\r\n\r\n~~~java\r\npublic class Base extends AppCompatActivity {\r\n\r\n    public DonationApp app;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        app = (DonationApp) getApplication();\r\n\r\n        app.dbManager.open();\r\n        app.dbManager.setTotalDonated(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        app.dbManager.close();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu)\r\n    {\r\n        getMenuInflater().inflate(R.menu.menu_donate, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu (Menu menu){\r\n        super.onPrepareOptionsMenu(menu);\r\n        MenuItem report = menu.findItem(R.id.menuReport);\r\n        MenuItem donate = menu.findItem(R.id.menuDonate);\r\n        MenuItem reset = menu.findItem(R.id.menuReset);\r\n\r\n        if(app.dbManager.getAll().isEmpty())\r\n        {\r\n            report.setEnabled(false);\r\n            reset.setEnabled(false);\r\n        }\r\n        else {\r\n            report.setEnabled(true);\r\n            reset.setEnabled(true);\r\n        }\r\n        if(this instanceof Donate){\r\n            donate.setVisible(false);\r\n            if(!app.dbManager.getAll().isEmpty())\r\n            {\r\n                report.setVisible(true);\r\n                reset.setEnabled(true);\r\n            }\r\n        }\r\n        else {\r\n            report.setVisible(false);\r\n            donate.setVisible(true);\r\n            reset.setVisible(false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void report(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Report.class));\r\n    }\r\n\r\n    public void donate(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Donate.class));\r\n    }\r\n\r\n    public void reset(MenuItem item) { }\r\n}\r\n~~~\r\n"},{"title":"#Adding Realm Database Support","shortTitle":"07","contentMd":"#Adding Realm Database Support\n\nOnce you configure the project and add the necessary Database class, (to fix the errors from the previous step) this step is relatively straight forward - all you have to do is replace the method calls that manages the <b><i>donationList</i></b> with the respective <b><i>dbManager</i></b> calls.\n\nFirst add this to your <b>PROJECT</b> level build.gradle\n\n~~~XML\nclasspath \"io.realm:realm-gradle-plugin:2.2.1\"\n~~~\n\nunder 'dependencies' so it looks like\n\n~~~XML\ndependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        classpath \"io.realm:realm-gradle-plugin:2.2.1\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n~~~\n\nand add this to your <b>APP</b> level build.gradle\n\n~~~XML\napply plugin: 'realm-android'\n~~~\n\nat the top of the file so it looks like\n\n~~~XML\napply plugin: 'com.android.application'\napply plugin: 'realm-android'\n~~~\n\nNext thing to do is create is a new <i>ie.app.database</i> package in your project and add the following class to it, and fix any import errors.\n\n~~~java\npublic class DBManager {\n\n\tpublic Realm realmDatabase;\n\n\tpublic DBManager(Context context) {\n\t\tRealm.init(context);\n\n\t\tRealmConfiguration config = new RealmConfiguration.Builder()\n\t\t\t\t.name(\"donation.realm\")\n\t\t\t\t.schemaVersion(1)\n\t\t\t\t.build();\n\n\t\tRealm.setDefaultConfiguration(config);\n\t}\n\n\tpublic void open() throws SQLException {\n\t\trealmDatabase = Realm.getDefaultInstance();\n\t}\n\n\tpublic void close() {\n\t\trealmDatabase.close();\n\t}\n\n\tpublic void add(Donation d) {\n\t\trealmDatabase.beginTransaction();\n\t\trealmDatabase.copyToRealm(d);\n\t\trealmDatabase.commitTransaction();\n\t}\n\n\tpublic List<Donation> getAll() {\n\t\tRealmResults<Donation> result = realmDatabase.where(Donation.class)\n\t\t\t\t\t\t\t\t\t\t\t\t\t .findAll();\n\t\treturn result.subList(0,result.size());\n\t}\n\n\tpublic Donation get(String id) {\n\t\treturn realmDatabase.where(Donation.class)\n\t\t\t\t.equalTo(\"id\",id)\n\t\t\t\t.findAll()\n\t\t\t\t.first();\n\t}\n\n\tpublic void setTotalDonated(Base base) {\n\t\tbase.app.totalDonated = realmDatabase.where(Donation.class)\n\t\t\t\t\t\t\t\t\t\t\t .findAll()\n\t\t\t\t\t\t\t\t\t\t\t .sum(\"amount\")\n\t\t\t\t\t\t\t\t\t\t\t .intValue();\n\t}\n\n\tpublic void reset() {\n\t\trealmDatabase.beginTransaction();\n\t\trealmDatabase.where(Donation.class)\n\t\t\t\t\t .findAll()\n\t\t\t\t\t .deleteAllFromRealm();\n\t\trealmDatabase.commitTransaction();\n\t}\n}\n~~~\n\nThis is our Realm Database Helper Class, which we covered in the lectures, but take a few moments to investigate the class and familiarise yourself with the methods you'll be using.\n\nThere are a few classes you'll need to modify to add database support to your project so refer to the Lecture Material to complete this.\n\nNext, update your <b>DonationApp</b> class with the following:\n\n~~~java\npublic class DonationApp extends Application\n{\n    public final int       target       = 10000;\n    public int             totalDonated = 0;\n    public DBManager       dbManager;\n\n    public boolean newDonation(Donation donation)\n    {\n        boolean targetAchieved = totalDonated > target;\n        if (!targetAchieved)\n        {\n            dbManager.add(donation);\n            totalDonated += donation.amount;\n        }\n        else\n        {\n            Toast.makeText(this, \"Target Exceeded!\", Toast.LENGTH_SHORT).show();\n        }\n        return targetAchieved;\n    }\n\n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n        Log.v(\"Donate\", \"Donation App Started\");\n        dbManager = new DBManager(this);\n        dbManager.open();\n        Log.v(\"Donate\", \"Realm Database Created & Opened\");\n    }\n}\n~~~\n\n<b>Note the references to a new <i>dbManager</i> object.</b>\n\nAlso, our Donation class needs a slight refactoring, so replace the current class with this one.\n\n~~~java\npublic class Donation extends RealmObject\n{\n    public String id;\n    public int    amount;\n    public String method;\n\n    public Donation() {}\n\n    public Donation (int amount, String method)\n    {\n        this.id = UUID.randomUUID().toString();\n        this.amount = amount;\n        this.method = method;\n    }\n\n    @Override\n    public String toString() {\n        return \"Donation{\" +\n                \"id = \" + id +\n                \"amount=$\" + amount +\n                \", method='\" + method + '\\'' +\n                '}';\n    }\n}\n~~~\nNote the 'extends RealmObject', this is an important part of implementing Realm Database Support so be sure you understand this.\n\nOnce you make these changes, commenting out/removing the donations List you'll get a number of errors, which actually indicates which classes you need to now update and add the database calls (and remove the donations List calls).\n\nEach error requires only one line of code to be fixed, so have a go and updating each of the classes (and we'll have a look at the solution near the end of the Practical Lab).\n\nOnce you fix all the errors, and run the app again, you should still be able to make donations - but this time those donations are stored in our Realm database.\n\nAnd as a final check, if you shut down the app and restart it again, you should still be able to see the donations made in the Report.\n"},{"title":"#Resetting the Donations","shortTitle":"08","contentMd":"#Resetting the Donations\n\nThe last step in this lab involves deleting all the donations in the database when the user wishes to 'Reset'.\n\nThere's actually not a lot required in this step - all you need to do is call <b>reset()</b> on your database object when the user selects the Menu option, so modify your reset method (in your Donate.java) as follows:\n\n~~~java\n  @Override\n  public void reset(MenuItem item)\n  {\n\t  app.dbManager.reset();\n\t\tapp.totalDonated = 0;\n\t\tamountTotal.setText(\"$\" + app.totalDonated);\n  }\n~~~\n\nYou also need to update your <i>onPrepareOptionsMenu()</i> method in your <b>Base</b> class to handle the 'Reset' menu option being disabled/displayed properly, so refer to the lecture material for this.\n\nThat's about it really - with one exception. There's a small bug in the app related to when the app restarts and the target <b>HAS NOT</b> been reached.\n\nCan you find it, and more importantly, fix it?\n"},{"title":"#Deleting a Donation","shortTitle":"09","contentMd":"#Deleting a Donation\n\nAs an extra feature, we'll take a look at how to possibly delete a single Donation from the database, as opposed to resetting (or deleting ) all the donations, like we did in the last step.\n\nFirst thing to do is add a new 'delete button' to our custom Layout <b>row_donate.xml</b> so it looks like this:\n\n![](img/lab5s901.png)\n\nEverything you need is in the screenshot, so pay particular attention to the properties and type of the 'button'.\n\nNext, open your <b>Report.java</b> and have a go at 'attaching a click event' to the 'delete button' on your custom row.\n\nYou'll need to something along the lines of:\n\n- bind to your new <i>imageDelete</i> widget in your <b>DonationAdapter</b> using 'findViewById()'\n\nsomething like\n\n~~~java\n       ImageView deleteView = view.findViewById(R.id.imageDelete);\n~~~\n\n- 'Tag' the row with the donation id\n\nsomething like\n\n~~~java\n       view.setTag(donation.id);\n~~~\n\n- attach an OnClickListener to be triggered on the click of the 'button'\n\nsomething like\n\n~~~java\n\n       deleteView.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n               Toast.makeText(context, \"You Want to Delete Donation \" +\n                       \"[ \" + app.dbManager.get(view.getTag().toString()) + \"]\",Toast.LENGTH_LONG).show();\n\n           }\n       });\n~~~\n\nif all goes to plan you should get something OnClickListener\n\n![](img/lab5s902.png)\n\nWhere's the actual deleting you may ask? Well, that'll be up to you....\n"},{"title":"#Solution","shortTitle":"Solution","contentMd":"#Solution\n\nThis is a solution to the lab:\n\n- [Donation.4.0.Realm](archives/Donation.4.0.Realm.zip)\n"}]}