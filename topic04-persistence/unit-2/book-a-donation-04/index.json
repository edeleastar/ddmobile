{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-06","contentMd":"#Objectives\n\nIn <b>Donation.4.0</b> you will build on the previous lab and add in some new features and Database Support, and an Application Object. On completion of this lab you'll be able to add Database Support to an Android Application and work with an 'Application' object.\n\n<b>NOTE : These Labs we build in a previous Version to Android Studio 3.0 so be aware that some images and instructions may not be up to date. Also, when replacing any XML with that from the Lab, the Widgets will not be 'anchored' so it would be advisable to go ahead and 'anchor' your widgets to improve the future design of your layouts.</b>\n"},{"title":"#Setup - Starter Code","shortTitle":"01","contentMd":"#Setup - Starter Code\n\nAs with the previous labs, you can download the solution/starter code for [Donation.4.0.starter](archives/Donation.4.0.Starter.zip), or continue on with your own version.\n\n\nYour current project (after renaming/copying) should looks as follows:\n\n![](img/lab5s101.png)\n\nIn this lab, you are required to do the following:\n\n- Add a new Menu Option - 'Reset' - to clear out any donations after the target is reached\n- Add Database Support to Donation to manage the donations made\n- Refactor existing Classes to accommodate the new database classes\n\nThe following steps will guide you through these requirements, so we'll start with the Menu Option.\n"},{"title":"#Adding a new Menu Option","shortTitle":"02","contentMd":"#Adding a new Menu Option\n\nFirst of all, confirm that the current Menu looks like this:\n\n![](img/lab5s201.png)\n\nbut we want something like this:\n\n![](img/lab5s202.png)\n\nThe first thing to do is add in a new resource in strings.xml (or use Android Studio (Alt + Return) to fix the string resource error if you paste in the menu item directly)\n\n~~~xml\n \t<string name=\"menuReset\">Reset</string>\n~~~\n\nand then the corresponding menu item in donate.xml\n\n~~~xml\n \t<item\n        android:id=\"@+id/menuReset\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\"\n        android:title=\"@string/menuReset\"\n        android:onClick=\"reset\"/>\n~~~\n\nIt's probably worth removing the 'Settings' menu item at this stage too, and its related method in the Base class. Next, edit <b>Base.java</b> and add in the following method stub\n\n~~~java\npublic void reset(MenuItem item) {}\n~~~\n\nto ensure our app won't crash when the menu loads (and looks for a method 'reset')\n\nRun the app again and confirm you get the following Menu :\n\n![](img/lab5s202.png)\n\nWe can't implement this menu option fully yet, so for the moment, we'll just 'reset' the target amount back to zero (0) - Step 03.\n"},{"title":"#Resetting the Target Amount","shortTitle":"03","contentMd":"#Resetting the Target Amount\n\nThis is more of an interim step but is necessary to ensure the menu event handler for the 'Reset' option is working correctly.\n\nFirst, edit <b>Donate.java</b> and introduce an implementation of the 'reset' method\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n\t\t// Your implementation goes here\n  }\n~~~\n\nthe\n\n~~~java\n@Override\n~~~\n\nannotation is important - can you explain why?\n\nSo add in the code necessary to deal with the Reset Menu option being selected, and reset the <i>totalDonated</i> back to zero (0). You also need to update the Donate UI to reflect this reset, so try and have a go at that too.\n\nRun the app again to confirm that the 'Reset' Menu option is now functioning.\n"},{"title":"#Application Object","shortTitle":"04","contentMd":"#Application Object\n\nBefore we complete this step, here's the code you need for the previous step.\n\n~~~java\n @Override\n  public void reset(MenuItem item)\n  {\n    totalDonated = 0;\n    amountTotal.setText(\"$\" + totalDonated);\n    donations.clear();\n  }\n~~~\n\nIn order to keep out application design coherent, we now bring in an 'Application' object.\n\nCreate a new package called 'ie.app.main' and incorporate this class here:\n\n~~~java\npackage ie.app.main;\n\nimport android.app.Application;\nimport android.util.Log;\n\npublic class DonationApp extends Application\n{\n  @Override\n  public void onCreate()\n  {\n    super.onCreate();\n    Log.v(\"Donate\", \"Donation App Started\");\n  }\n}\n~~~\n\nApplication objects need to be references in the AndroidManifest.xml - at the very top as 'andorid:name'\n\n~~~xml\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:name=\"ie.app.main.DonationApp\">\n~~~\n\nMake sure the 'Donation App Started' appears in the logs to verify that it has actually been engaged correctly, when you launch the app.\n\n![](img/lab5s401.png)\n"},{"title":"#Donation Model","shortTitle":"05","contentMd":"#Donation Model\n\nWe now need to refactor the Base class (next Step) and move the donation related attributes and method (i.e. the variables target, totalDonated and the donations list, and the newDonation() method) into our DonationApp class.\n\nThis is a revised version of DonationApp - which now manages a list of donations. It also centralises the 'makeDonation' event implementing it as a method. We also 'open' and  'close' our database here. Replace your DonationApp class with this one:\n\n~~~java\npackage ie.app.main;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport android.app.Application;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport ie.app.models.Donation;\n\npublic class DonationApp extends Application\n{\n    public final int       target       = 10000;\n    public int             totalDonated = 0;\n    public List <Donation> donations    = new ArrayList<Donation>();\n\n    public boolean newDonation(Donation donation)\n    {\n        boolean targetAchieved = totalDonated > target;\n        if (!targetAchieved) {\n            donations.add(donation);\n            totalDonated += donation.amount;\n        }\n        else\n            Toast.makeText(this, \"Target Exceeded!\", Toast.LENGTH_SHORT).show();\n\n        return targetAchieved;\n    }\n\n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n        Log.v(\"Donate\", \"Donation App Started\");\n    }\n}\n~~~\n"},{"title":"#Base Class Refactoring","shortTitle":"06","contentMd":"#Base Class Refactoring\r\n\r\nThe Base activity can now be completely refactored to make use of the DonationApp object. You <b>MAY</b> have errors at the end of this step, due to referencing our (as yet missing) database classes - but we'll fix those in the next few steps.\r\n\r\nThis is our new Base class\r\n\r\n~~~java\r\npackage ie.app.activities;\r\n\r\nimport android.content.Intent;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.os.Bundle;\r\n\r\nimport ie.app.R;\r\nimport ie.app.main.DonationApp;\r\n\r\npublic class Base extends AppCompatActivity {\r\n\r\n    public DonationApp app;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        app = (DonationApp) getApplication();\r\n        app.dbManager.setTotalDonated(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu)\r\n    {\r\n        getMenuInflater().inflate(R.menu.menu_donate, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu (Menu menu){\r\n        super.onPrepareOptionsMenu(menu);\r\n        MenuItem report = menu.findItem(R.id.menuReport);\r\n        MenuItem donate = menu.findItem(R.id.menuDonate);\r\n        MenuItem reset = menu.findItem(R.id.menuReset);\r\n\r\n        if(app.dbManager.getAll().isEmpty())\r\n        {\r\n            report.setEnabled(false);\r\n            reset.setEnabled(false);\r\n        }\r\n        else {\r\n            report.setEnabled(true);\r\n            reset.setEnabled(true);\r\n        }\r\n        if(this instanceof Donate){\r\n            donate.setVisible(false);\r\n            if(!app.dbManager.getAll().isEmpty())\r\n            {\r\n                report.setVisible(true);\r\n                reset.setEnabled(true);\r\n            }\r\n        }\r\n        else {\r\n            report.setVisible(false);\r\n            donate.setVisible(true);\r\n            reset.setVisible(false);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void report(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Report.class));\r\n    }\r\n\r\n    public void donate(MenuItem item)\r\n    {\r\n        startActivity (new Intent(this, Donate.class));\r\n    }\r\n\r\n    public void reset(MenuItem item) {}\r\n}\r\n~~~\r\n"},{"title":"#Adding Database Support","shortTitle":"07","contentMd":"#Adding Database Support\n\nOnce you import the necessary Database classes, (to fix the errors from the previous step) this step is relatively straight forward - all you have to do is replace the method calls that manages the <b><i>donationList</i></b> with the respective <b><i>dbManager</i></b> calls.\n\nFirst thing to do is download the necessary database classes in the [database](archives/database.zip) archive and add them to a new <i>ie.app.database</i> package in your project.\n\nTake a few moments to investigate the classes and familiarise yourself with the methods you'll be using.\n\nThere are a few classes you'll need to modify to add database support to your project, but initially, you need to create an instance of <b><i>DBManager</i></b> in <b>Base.java</b> and both open/close the database when necessary, so refer to the Lecture Material to complete this.\n\nNext, update your <b>DonationApp</b> class with the following:\n\n~~~java\npackage ie.app.main;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport android.app.Application;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport ie.app.database.DBManager;\nimport ie.app.models.Donation;\n\npublic class DonationApp extends Application\n{\n    public final int       target       = 10000;\n    public int             totalDonated = 0;\n    public List <Donation> donations    = new ArrayList<Donation>();\n    public DBManager dbManager;\n\n\n    public boolean newDonation(Donation donation)\n    {\n        boolean targetAchieved = totalDonated > target;\n        if (!targetAchieved) {\n            dbManager.add(donation);\n            totalDonated += donation.amount;\n        }\n        else\n            Toast.makeText(this, \"Target Exceeded!\", Toast.LENGTH_SHORT).show();\n\n        return targetAchieved;\n    }\n\n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n        Log.v(\"Donate\", \"Donation App Started\");\n        dbManager = new DBManager(this);\n        dbManager.open();\n        Log.v(\"Donate\", \"Database Opened\");\n    }\n\n    @Override\n    public void onTerminate() {\n        super.onTerminate();\n        dbManager.close();\n        Log.v(\"Donate\", \"Database Closed\");\n    }\n}\n~~~\n\n<b>Note the references to a new <i>dbManager</i> object.</b>\n\nAlso, our Donation class needs a slight refactoring, so replace the current class with this one.\n\n~~~java\npublic class Donation\n{\n  public int    id;\n  public int    amount;\n  public String method;\n\n  public Donation (int amount, String method)\n  {\n    this.amount = amount;\n    this.method = method;\n  }\n\n  public Donation ()\n  {\n    this.amount = 0;\n    this.method = \"\";\n  }\n\n  public String toString()\n  {\n    return id + \", \" + amount + \", \" + method;\n  }\n}\n\n~~~\n\nOnce you make these changes, commenting out the donationList List, (and save the file) you'll get a number of errors, which actually indicates which classes you need to now update and add the database calls (and remove the donationList calls).\n\nEach error requires only one line of code to be fixed, so have a go and updating each of the classes (and we'll have a look at the solution near the end of the Practical Lab).\n\nOnce you fix all the errors, and run the app again, you should still be able to make donations - but this time those donations are stored in a database.\n\nAnd as a final check, if you shut down the app and restart it again, you should still be able to see the donations Report.\n"},{"title":"#Resetting the Donations","shortTitle":"08","contentMd":"#Resetting the Donations\n\nThe last step in this lab involves deleting all the donations in the database when the user wishes to 'Reset'.\n\nThere's actually not a lot required in this step - all you need to do is call <b>reset()</b> on your database object when the user selects the Menu option, so modify your reset method (in your Donate.java) as follows:\n\n~~~java\n  @Override\n  public void reset(MenuItem item)\n  {\n\t  app.dbManager.reset();\n\t\tapp.totalDonated = 0;\n\t\tamountTotal.setText(\"$\" + app.totalDonated);\n  }\n~~~\n\nYou also need to update your <i>onPrepareOptionsMenu()</i> method in your <b>Base</b> class to handle the 'Reset' menu option being disabled/displayed properly, so refer to the lecture material for this.\n\nThat's about it really - with one exception. There's a small bug in the app related to when the app restarts and the target <b>HAS NOT</b> been reached.\n\nCan you find it, and more importantly, fix it?\n"},{"title":"#Android Device Monitor","shortTitle":"09","contentMd":"#Android Device Monitor\n\nAs an exercise of sorts, you should become familiar with the Android Device Monitor, particularly how it relates to viewing your database on the emulator/device.\n\n![](img/lab5s901.png)\n---\n\nIn Android Studio, you launch the Android Device Monitor as follows:\n\nTools->Android->Android Device Monitor (as below)\n\n![](img/lab5s902.png)\n\nNext, you need to navigate to the data/data folder within the application package on the device (in our case ie.app) like so:\n\n![](img/lab5s903.png)\n\nThen, scroll/find your database (donations.db) in the ie.app.databases folder:\n\n![](img/lab5s904.png)\n\nSelect the \"Pull a file from the Device\" on the top right-hand-side of the window:\n\n![](img/lab5s905.png)\n\nand save your database file to a local folder.\n\nNext download and install [sqlitebrowser](http://sqlitebrowser.org) which will allow us to view our database graphically.\n\n![](img/lab5s906.png)\n\nLaunch your sqlitebrowser app/program to get this window:\n\n![](img/lab5s907.png)\n\nand then 'Open Database' selecting the database you pulled from the device. If everything goes to plan, you should be able to view your database table(s) and their content, as well as the SQL that created the tables.\n\nBelow, we can see a donations table with 3 donations\n\n![](img/lab5s908.png)\n\nand the corresponding entries in our Android App.\n\n![](img/lab5s909.png)\n"},{"title":"#Solution","shortTitle":"Solution","contentMd":"#Solution\n\nThis is a solution to the lab:\n\n- [Donation.4.0](archives/Donation.4.0.zip)\n"}]}