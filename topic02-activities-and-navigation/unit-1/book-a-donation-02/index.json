{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-03","contentMd":"#Objectives\n\nIn this Lab, you will be required to build the second version of our Donation Case Study App, called <b>Donation.2.0</b>. Here, we introduce some simple menu handling and evolve the Donation Android app to include a Report view. We also make use of a simple ArrayAdapter to display donation data in our Report.\n\n<b>NOTE : These Labs we build in a previous Version to Android Studio 3.0 so be aware that some images and instructions may not be up to date. Also, when replacing any XML with that from the Lab, the Widgets will not be 'anchored' so it would be advisable to go ahead and 'anchor' your widgets to improve the future design of your layouts.</b>\n"},{"title":"#Package Name","shortTitle":"01","contentMd":"#Package Name\n\nThis is the version from the previous Lab of the <b>Donation</b> app:\n\n- [Donation.1.5.zip](archives/Donation.1.5.zip)\n\nand this is the current version of the <b>Donation</b> app (**Your Starter Code for this lab**)\n\n- [Donation.2.0.zip](archives/Donation.2.0.Starter.zip)\n\nI'd recommend downloading the 'Starter Code', but if you wish to continue using your version (1.5) you would need to 'refactor' it to <b>Donation.2.0</b>. So, all you need to do is:\n\n1. Close the current project\n2. Copy and rename the Donation.1.5 folder to Donation.2.0\n3. Open the Project Donation.2.0 in Android Studio\n\nAnd don't forget to update your **app_name** resource in your **strings.xml**.\n\nWe should also take this opportunity to change the name of the 'ie.app' package to 'ie.app.activities', as we will be introducing other packages later on.\n\nSo create a new package called **ie.app.activities** (in the **main** folder)\n\n![](img/lab3s101.png)\n\nand drag in your <b>Donate.java</b> into this new package. You can delete the empty package (if Android Studio hasn't done it already)\n\nDo the same for the <b>ApplicationTest</b> class.\n\nNext, check that the import statement in **Donate.java** is as follows:\n\n```\nimport android.widget.Toast;\n\nimport ie.app.R;\n\npublic class Donate extends AppCompatActivity {\n  ...\n```\n\n![](img/lab3s102.png)\n\nSo make sure your project structure looks like the above before continuing.\n\nAlso, don't forget to change the <b>app_name</b> string resource in your strings.xml.\n\n\nWhether you've downloaded the Starter App or continued on with your own app, you should still \"Clean\" your project at this stage \"Build->Clean Project\", and then Rebuild & finally run your app, to make sure everything is ok.\n"},{"title":"#Working with Menus","shortTitle":"02","contentMd":"#Working with Menus\n\nOpen <b>res/values/strings.xml</b> and introduce a new String resource like this:\n~~~xml\n<string name=\"menuReport\">Report</string>\n~~~\n\nWe have a menu resource called **menu_donate.xml** in the **res/menu** folder. Modify this file by adding this new menu item:\n~~~xml\n  <item\n       android:id=\"@+id/menuReport\"\n        android:orderInCategory=\"100\"\n        android:title=\"@string/menuReport\"\n        app:showAsAction=\"never\"/>\n~~~\n(Make sure it is within the '**menu**' element)\n\nIn **Donate.java**, change the ***onOptionsItemSelected()*** method to look like this:\n\n~~~java\n  @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId())\n        {\n            case R.id.menuReport:\n                Toast.makeText(this, \"Report Selected\", Toast.LENGTH_SHORT).show();\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n~~~\nRun the app and when you press the menu button (or the overflow menu) and select 'Report', you should see the toast message appear.\n\n![](img/lab3s103.png)![](img/lab3s104.png)\n"},{"title":"#Reports Activity","shortTitle":"03","contentMd":"#Reports Activity\n\nBefore we start to design a new activity, Add a string resource in **res/values/strings.xml**:\n\n~~~xml\n<string name=\"reportTitle\">Report</string>\n~~~\n\nDesign a new layout called **activity_report**. Do this by locating the **res/layout** folder and selecting \"New->Layout resource file\", like so:\n\n![](img/lab3s301.png)\n\nYou can choose all the defaults for this layout.\n\n![](img/lab3s302.png)\n\n\"Morph\" our layout from Linear to Relative, like so,\n\n![](img/lab3s303.png)\n\nand build a layout similar to the following:\n\n![](img/lab3s304.png)\n\nThis is the layout file itself, if you just want to overwrite the xml:\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/relativeLayout2\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:layout_editor_absoluteY=\"81dp\">\n\n    <TextView\n        android:id=\"@+id/reportTitle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:text=\"@string/reportTitle\"\n        android:textAppearance=\"?android:attr/textAppearanceLarge\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.026\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.017\" />\n\n    <ListView\n        android:id=\"@+id/reportList\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"58dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</android.support.constraint.ConstraintLayout>\n~~~\n\nIntroduce a new \"Empty Activity\" into **ie.app.activities** to render this activity - but be careful **NOT** to '***Generate Layout File***' (as we have one already):\n\n![](img/lab3s305.png)\n\nand replace it with the following:\n\n~~~java\npackage ie.app.activities;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\n\nimport ie.app.R;\n\npublic class Report extends AppCompatActivity\n{\n  ListView listView;\n\n  static final String[] numbers = new String[] {\n      \"Amount, Pay method\",\n      \"10,     Direct\",\n      \"100,    PayPal\",\n      \"1000,   Direct\",\n      \"10,     PayPal\",\n      \"5000,   PayPal\"};\n\n  @Override\n  public void onCreate(Bundle savedInstanceState)\n  {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_report);\n\n    listView = (ListView) findViewById(R.id.reportList);\n    ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,  android.R.layout.simple_list_item_1, numbers);\n    listView.setAdapter(adapter);\n  }\n}\n~~~\n\nThis will display a hard-coded lists of donations on the \"Report Screen\".\n\nChange the **Donate** activity to load this view when \"Report\" is selected from the menu:\n\n~~~java\n  @Override\n  public boolean onOptionsItemSelected(MenuItem item)\n  {\n    switch (item.getItemId())\n    {\n      case R.id.menuReport : startActivity (new Intent(this, Report.class));\n                             break;\n    }\n   return super.onOptionsItemSelected(item);\n  }\n~~~\n\nConfirm that the activity specification has been added to the **AndroidManifest.xml** file:\n\n~~~xml\n      <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"ie.app\" >\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\".activities.Donate\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/AppTheme.NoActionBar\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".activities.Report\" >\n        </activity>\n    </application>\n\n</manifest>\n\n~~~\n\nTry it all now - it should load up, like below\n\n![](img/lab3s306.png)\n"},{"title":"#Our Menu Revisited","shortTitle":"04","contentMd":"#Our Menu Revisited\n\nWhen you navigate from the **Donate** activity to **Report**, there will be no menu available. So we need to first *inflate* the menu by introducing the following method into the **Report** activity, like so\n\n~~~java\n@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_donate, menu);\n        return true;\n    }\n~~~\n\nBring in a new menu item, '***Donate***' - Donate should bring you back to the main **Donate** Screen.\n\nThis is a very similar approach to what you did in **Step 02**, so revisit this step and see if you can end up with something like the following for the **Report** Screen:\n\n![](img/lab3s401.png)\n\nSo when you select \"Donate\" you should be navigated back to the **Donate** activity (and vice-versa).   \n\nWe'll look at populating the list with actual donations in the next lab.\n"},{"title":"#Solution","shortTitle":"Solution","contentMd":"#Solution\n\nSolution so far:\n\n- [Donation.2.0.zip](archives/Donation.2.0.zip)\n"}]}